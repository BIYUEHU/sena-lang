let foo = 1
let foo1 = "Hello, FP!"
let foo2: Char = 'X'
// type Bool2 = True | False
// let foo3: Bool2 = False
let foo4: Float = 3.1415926

type List: Type -> Type = [T] Cons(T, List(T)) | Nil
let String1 = List(Char)
// let String2 = [Char]

let fruits: List(String) = Cons("Apple", Cons("Banana", Cons("Pear", Nil)))
// let fruits2: [String] = ["Apple", "Banana", "Pear"]

let add: Int -> Int -> Int = (x, y) => x + y
let add1 = (x: Int, y: Int): Int => x + y

let fibonacii: Int -> Int = (x) =>
  match x then
    | 1 => 1
    | 2 => 1
    | x => fibonacii(x - 1) + fibonacii(x - 2)


type Nat = Z | S(Nat)

let toNumber = (x) =>
  match x then
    | S(n) if n == Z => 1
    | S(n) => 1 + toNumber(n)
    | Z => 0

let num = S(S(S(Z)))
print(add(toNumber(num), 3))

let bar =
  let x = 20 in
  let y = 30 in
  x + y ^ 2 * 2 / 5 - 5 % 1

let bar2 = {
  let x = 20
  let y = 30
  x + y ^ 2 * 2 / 5 - 5 % 1
}

let #:# = (el, list) => Cons(el, list)
let #$# = (f, x) => f(x)
let #.# = (g, f) => (x) => f(g(x))

let handleScore = (x: Int) =>
  if x > 100 || x < 0 then "Fake"
  else if x == 100 then "Best"
  else if x > 90 then "Excellent"
  else if x > 70 then "Good"
  else if x > 60 then "Not bad"
  else if x > 40 then "Bad"
  else "Shit"


// let fibonacii: Int -> Int
//  | 1 => 1
//  | 2 => 1
//  | x => fibonacii(x - 1) + fibonacii(x - 2)


