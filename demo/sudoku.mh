type List = [A] Cons(A, List(A)) | Nil
type Pair = [A, B] MkPair(A, B)
type Maybe = [A] Just(A) | Nothing

let #:# = (el, list) => Cons(el, list)
let #$# = (f, x) => f(x)
let #.# = (g, f) => (x) => f(g(x))
let #..#: Int -> Int -> List(Int) = (start, end) =>
  if start > end then Nil
  else start : (start + 1 .. end)

let #++# = (list1, list2) =>
  match list1 then
    | Cons(a, b) =>
      Cons(a, b ++ list2)
    | Nil => list2

let #+++# = (str1, str2) => concat(str1, str2)

let get = (list, index) =>
  if index < 0 then Nothing
  else match list then
    | Cons(a, b) =>
      if index == 0 then Just(a) else get(b, index - 1)
    | Nil =>
      Nothing

let map = (f, list) =>
  match list then
    | Cons(a, b) =>
      Cons(f(a), map(f, b))
    | Nil => Nil

let filter = (f, list) =>
  match list then
    | Cons(a, b) =>
      if f(a) then Cons(a, filter(f, b))
      else filter(f, b)
    | Nil => Nil

let take = (n, list) =>
  if n <= 0 then Nil
  else match list then
    | Cons(a, b) =>
      Cons(a, take(n-1, b))
    | Nil => Nil

let concatMap = (f, list) =>
  match list then
    | Cons(a, b) =>
      f(a) ++ concatMap(f, b)
    | Nil => Nil

let foldl = (f, acc, list) =>
  match list then
    | Cons(x, xs) =>
      foldl(f, f(acc, x), xs)
    | Nil => acc

let maybeToList = (maybe) =>
  match maybe then
    | Just(a) => Cons(a, Nil)
    | Nothing => Nil

let maybeToInt: Maybe(Int) -> Int = (maybe) =>
  match maybe then
    | Just(a) => a
    | Nothing => -1

let elem = (x, list) =>
  match list then
    | Cons(a, b) =>
      if a == x then true else elem(x, b)
    | Nil => false

let max = (x, y) => if x > y then x else y

let min = (x, y) => if x < y then x else y

let show = (a) =>
  let f = (a) =>
    match a then
      | Cons(a, b) =>
        a +++ let c = f(b) in if c == "" then "" else ", " +++ c
      | Nil => ""
  in "[" +++ f(a) +++ "]"

let replicate = (n, x) =>
    if n <= 0 then Nil
    else Cons(x, replicate(n-1, x))

let Grid = List(List(Int))

let emptyGrid = replicate(9, replicate(9, 0))

let showGrid = (grid) =>
  let cols = (col) =>
    match col then
      | Cons(a, b) =>
        a +++ let c = cols(b) in if c == "" then "" else "|" +++ c
      | Nil => ""
  in
  let rows = (row) =>
    match row then
      | Cons(a, b) =>
        cols(a) +++ let c = rows(b) in if c == "" then "" else "\n" +++ c
      | Nil => ""
  in
  rows(grid)

let getRow = get

let getCol = (grid, c) =>
  map(maybeToInt, filter(
      (x) =>
      match x then
        | Just(_) => true
        | _ => false,
      map((row) => get(row, c), grid)
    )
  )

let getBox: Grid -> Pair(Int, Int) -> List(Int) = (g, pair) =>
  match pair then
    | MkPair(r, c) =>
      let br = (r / 3) * 3 in
      let bc = (c / 3) * 3 in
      concatMap(
        (dr) =>
          concatMap(
            (dc) =>
              maybeToList(get(maybeToInt(get(g, br + dr)), bc + dc)),
              0 .. 2
          )
        ,
        0 .. 2
      )
    | _ => Nil

let isValid: Grid -> Pair(Int, Int) -> Int -> Bool = (g, pair, n) =>
  match pair then
    | MkPair(r, c) =>
      match getRow(g, r) then
        | Just(row) =>
          !elem(n, row) && !elem(n, getCol(g, c)) && !elem(n, getBox(g, MkPair(r, c)))
        | Nothing => false

let findEmpty: Grid -> Maybe(Pair(Int, Int)) = (g) =>
  let findCol = (row, r, c) =>
    match row then
      | Cons(cell, cells) =>
        if cell == 0 then Just(c)
        else findCol(cells, r, c + 1)
      | Nil => Nothing
  in
  let findRow = (grid, r) =>
    match grid then
      | Cons(row, rows) =>
        match findCol(row, r, 0) then
          | Just(c) => Just(MkPair(r, c))
          | Nothing => findRow(rows, r + 1)
      | Nil => Nothing
  in
  findRow(g, 0)


let updateGrid: Grid -> Pair(Int, Int) -> Int -> Grid = (g, pair, n) =>
  match pair then
    | MkPair(tr, tc) =>
      let updateCols = (row, c) =>
        match row then
          | Cons(cell, cells) =>
            (if c == tc then n else cell) : updateCols(cells, c + 1)
          | Nil => Nil
      in
      let updateRows = (grid, r) =>
        match grid then
          | Cons(row, rows) =>
            (if r == tr then updateCols(row, 0) else row) : updateRows(rows, r + 1)
          | Nil => Nil
      in
      updateRows(g, 0)

let solve: Grid -> Maybe(Grid) = (g) =>
  match findEmpty(g) then
    | Just(pair) =>
      match pair then
        | MkPair(r, c) =>
          let tryNumbers = (numbers) =>
            match numbers then
              | Cons(x, xs) =>
                match solve(updateGrid(g, pair, x)) then
                  | Just(grid) => Just(grid)
                  | Nothing => tryNumbers(xs)
              | Nil => Nothing
          in
          tryNumbers(0 .. 9)
    | Nothing => Just(g)

// let digHoles: Grid -> Int -> Grid = (g, k) =>
//   if k <= 0 then g
//   else let gen = (r, c) =>
//     if r == 9 then Nil else
//     if c == 9 then gen(r + 1, 0) else
//     MkPair(r, c) : gen(r, c + 1)
//     in
//     foldl(updateGrid(g, take(k, gen(0, 0)) ,0))
let digHoles: Grid -> Int -> Grid = (g, k) =>
  if k <= 0 then g
  else let gen = (r, c) =>
    if r == 9 then Nil
    else if c == 9 then gen(r + 1, 0)
    else MkPair(r, c) : gen(r, c + 1)
  in
  let coords = take(k, gen(0, 0)) in
  foldl((acc, pos) => updateGrid(acc, pos, 0), g, coords)


let generatePuzzle: Int -> Maybe(Grid) = (clues) =>
  match solve(emptyGrid) then
    | Just(full) =>
      Just(digHoles(full, 81 - max(17, min(clues, 81))))
    | Nothing => Nothing


match generatePuzzle(30) then
  | Just(puzzle) => {
    print("Puzzle:")
    print(showGrid(puzzle))
    match solve(puzzle) then
      | Just(solved) => {
          print("Solution:")
          print(showGrid(solved))
        }
      | Nothing => print("No solution found.")
  }
  | Nothing => print("Failed to generate puzzle.")
