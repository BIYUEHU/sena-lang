/* Prelude.mh */

type List: Type -> Type = [A] Cons(A, List(A)) | Nil
type Pair: Type -> Type -> Type = [A, B] MkPair(A, B)

type Maybe: Type -> Type = [A] Just(A) | Nothing
let Option = Maybe

type Either: Type -> Type -> Type = [A, B] Left(A) | Right(B)
let Result = Either

let #$# = (f, x) => f(x)

let #.# = (g, f) => (x) => f(g(x))

let #..#: Int -> Int -> List(Int) = (start, end) =>
  if start > end then Nil
  else start : (start + 1 .. end)

let #:# = (el, list) => Cons(el, list)

let #++# = (list1, list2) =>
  match list1 then
    | Cons(a, b) =>
      Cons(a, b ++ list2)
    | Nil => list2

let #+~# = concat

let get = (list, index) =>
  if index < 0 then Nothing
  else match list then
    | Cons(a, b) =>
      if index == 0 then Just(a) else get(b, index - 1)
    | Nil =>
      Nothing

let map = (f, list) =>
  match list then
    | Cons(a, b) =>
      Cons(f(a), map(f, b))
    | Nil => Nil

let filter = (f, list) =>
  match list then
    | Cons(a, b) =>
      if f(a) then Cons(a, filter(f, b))
      else filter(f, b)
    | Nil => Nil

let take = (n, list) =>
  if n <= 0 then Nil
  else match list then
    | Cons(a, b) =>
      Cons(a, take(n-1, b))
    | Nil => Nil

let concatMap = (f, list) =>
  match list then
    | Cons(a, b) =>
      f(a) ++ concatMap(f, b)
    | Nil => Nil

let foldl = (f, acc, list) =>
  match list then
    | Cons(x, xs) =>
      foldl(f, f(acc, x), xs)
    | Nil => acc

let maybeToList = (maybe) =>
  match maybe then
    | Just(a) => Cons(a, Nil)
    | Nothing => Nil

let maybeToInt: Maybe(Int) -> Int = (maybe) =>
  match maybe then
    | Just(a) => a
    | Nothing => -1

let elem = (x, list) =>
  match list then
    | Cons(a, b) =>
      if a == x then true else elem(x, b)
    | Nil => false

let max = (x, y) => if x > y then x else y

let min = (x, y) => if x < y then x else y

let showList = (a) =>
  let f = (a) =>
    match a then
      | Cons(a, b) =>
        a +++ let c = f(b) in if c == "" then "" else ", " +++ c
      | Nil => ""
  in "[" +++ f(a) +++ "]"

let replicate = (n, x) =>
    if n <= 0 then Nil
    else Cons(x, replicate(n-1, x))

